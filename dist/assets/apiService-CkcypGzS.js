import{x as o,a as d}from"./index-Cre1HAju.js";import{A as s,E as n,P as p}from"./api-D_YAzMdB.js";const a=()=>{const r=d();if(!r.token)throw new Error("Authentication token not found");return{Authorization:`Bearer ${r.token}`,Accept:"application/json","Content-Type":"application/json"}},i=(r,e={})=>{let t=r;return Object.keys(e).forEach(c=>{t=t.replace(`:${c}`,e[c])}),t},u={auth:{login:async r=>{try{return(await o.post(`${s}${n.AUTH.LOGIN}`,r,{headers:{"Content-Type":"application/json"}})).data}catch(e){throw console.error("Login error:",e),e}},logout:async()=>{try{return(await o.post(`${s}${n.AUTH.LOGOUT}`,{},{headers:a()})).data}catch(r){throw console.error("Logout error:",r),r}},getUsers:async()=>{try{return(await o.get(`${s}${n.AUTH.USERS}`,{headers:a()})).data}catch(r){throw console.error("Error fetching users:",r),r}},registerUser:async r=>{try{return(await o.post(`${s}${n.AUTH.REGISTER}`,r,{headers:a()})).data}catch(e){throw console.error("Error registering user:",e),e}},updateUser:async(r,e)=>{try{return(await o.put(`${s}${n.AUTH.USER_UPDATE}?pk=${r}`,e,{headers:a()})).data}catch(t){throw console.error("Error updating user:",t),t}},deleteUser:async r=>{try{return(await o.delete(`${s}${n.AUTH.USER_DELETE}?pk=${r}`,{headers:a()})).data}catch(e){throw console.error("Error deleting user:",e),e}},getUserLevels:async()=>{try{return(await o.get(`${s}${n.AUTH.LEVELS}`,{headers:a()})).data}catch(r){throw console.error("Error fetching user levels:",r),r}},updateUserLevel:async(r,e)=>{try{return(await o.put(`${s}${n.AUTH.LEVEL_UPDATE}?pk=${r}`,e,{headers:a()})).data}catch(t){throw console.error("Error updating user level:",t),t}},assignUserLevel:async(r,e)=>{try{return(await o.put(`${s}${n.AUTH.USER_LEVEL_ASSIGN}`,{user_id:r,level_order:e},{headers:a()})).data}catch(t){throw console.error("Error assigning user level:",t),t}}},transfers:{fetchTransfers:async(r="",e=1)=>{try{const t={page:e.toString(),page_size:p.PAGE_SIZE.toString()},c=r.trim()?{code:"FAR",search:r.trim()}:{code:"FAR"};return(await o.post(`${s}${n.BUDGET.TRANSFERS_LIST}`,c,{headers:a(),params:t})).data}catch(t){throw console.error("Error fetching transfers:",t),t}},deleteTransfer:async r=>{try{const e=i(`${s}${n.BUDGET.TRANSFER_DELETE}`,{id:r});return(await o.delete(e,{headers:a()})).data}catch(e){throw console.error("Error deleting transfer:",e),e}},fetchTransfersPendingApproval:async(r={},e=1)=>{try{const t={page:e.toString(),page_size:p.PAGE_SIZE.toString(),...r};return(await o.get(`${s}${n.BUDGET.TRANSFERS_PENDING_APPROVAL}`,{headers:a(),params:t})).data}catch(t){throw console.error("Error fetching transfers pending approval:",t),t}},approveOrRejectTransfer:async r=>{try{return(await o.post(`${s}${n.BUDGET.TRANSFER_APPROVE_REJECT}`,r,{headers:a()})).data}catch(e){throw console.error("Error approving/rejecting transfer:",e),e}},getTransferDetails:async r=>{try{return(await o.get(`${s}/api/budget/transfers/${r}/`,{headers:a()})).data}catch(e){throw console.error("Error fetching transfer details:",e),e}},getPivotFundDetails:async(r,e)=>{try{return(await o.get(`${s}/api/budget/pivot-fund/?cost_center=${r}&account=${e}`,{headers:a()})).data}catch(t){throw console.error("Error fetching pivot fund details:",t),t}},generateReport:async(r,e="pdf")=>{try{return(await o.post(`${s}/api/budget/transfers/${r}/report/`,{format:e},{headers:a()})).data}catch(t){throw console.error("Error generating report:",t),t}},createTransfer:async r=>{try{return(await o.post(`${s}/api/budget/transfers/create/`,r,{headers:a()})).data}catch(e){throw console.error("Error creating transfer:",e),e}},updateTransfer:async(r,e)=>{try{return(await o.put(`${s}/api/budget/transfers/${r}/update/`,e,{headers:a()})).data}catch(t){throw console.error("Error updating transfer:",t),t}},getDashboardData:async()=>{try{return(await o.get(`${s}${n.BUDGET.DASHBOARD}`,{headers:a()})).data}catch(r){throw console.error("Error fetching dashboard data:",r),r}}},accountEntities:{getEntities:async()=>{try{return(await o.get(`${s}${n.ACCOUNTS_ENTITIES.ENTITIES}`,{headers:a()})).data}catch(r){throw console.error("Error fetching entities:",r),r}},createEntity:async r=>{try{return(await o.post(`${s}${n.ACCOUNTS_ENTITIES.ENTITIES_CREATE}`,r,{headers:a()})).data}catch(e){throw console.error("Error creating entity:",e),e}},getEntityDetails:async r=>{try{const e=i(`${s}${n.ACCOUNTS_ENTITIES.ENTITY_DETAIL}`,{id:r});return(await o.get(e,{headers:a()})).data}catch(e){throw console.error("Error fetching entity details:",e),e}},updateEntity:async(r,e)=>{try{const t=i(`${s}${n.ACCOUNTS_ENTITIES.ENTITY_UPDATE}`,{id:r});return(await o.put(t,e,{headers:a()})).data}catch(t){throw console.error("Error updating entity:",t),t}},deleteEntity:async r=>{try{const e=i(`${s}${n.ACCOUNTS_ENTITIES.ENTITY_DELETE}`,{id:r});return(await o.delete(e,{headers:a()})).data}catch(e){throw console.error("Error deleting entity:",e),e}},getAccounts:async()=>{try{return(await o.get(`${s}${n.ACCOUNTS_ENTITIES.ACCOUNTS}`,{headers:a()})).data}catch(r){throw console.error("Error fetching accounts:",r),r}},createAccount:async r=>{try{return(await o.post(`${s}${n.ACCOUNTS_ENTITIES.ACCOUNT_CREATE}`,r,{headers:a()})).data}catch(e){throw console.error("Error creating account:",e),e}},getAccountDetails:async r=>{try{const e=i(`${s}${n.ACCOUNTS_ENTITIES.ACCOUNT_DETAIL}`,{id:r});return(await o.get(e,{headers:a()})).data}catch(e){throw console.error("Error fetching account details:",e),e}},updateAccount:async(r,e)=>{try{const t=i(`${s}${n.ACCOUNTS_ENTITIES.ACCOUNT_UPDATE}`,{id:r});return(await o.put(t,e,{headers:a()})).data}catch(t){throw console.error("Error updating account:",t),t}},deleteAccount:async r=>{try{const e=i(`${s}${n.ACCOUNTS_ENTITIES.ACCOUNT_DELETE}`,{id:r});return(await o.delete(e,{headers:a()})).data}catch(e){throw console.error("Error deleting account:",e),e}},getAccountLimits:async(r,e=1)=>{try{return(await o.get(`${s}${n.ACCOUNTS_ENTITIES.ACCOUNT_ENTITY_LIMIT_LIST}`,{params:{cost_center:r,page:e},headers:a()})).data}catch(t){throw console.error("Error fetching account limits:",t),t}},updateAccountLimit:async(r,e)=>{try{return(await o.put(`${s}${n.ACCOUNTS_ENTITIES.ACCOUNT_ENTITY_LIMIT_UPDATE}?pk=${r}`,e,{headers:a()})).data}catch(t){throw console.error("Error updating account limit:",t),t}}},notifications:{getUnreadNotifications:async()=>{try{return(await o.get(`${s}${n.AUTH.NOTIFICATIONS}/unread`,{headers:a()})).data}catch(r){return console.error("Error fetching unread notifications:",r),{notifications:[]}}},checkSystemNotifications:async()=>{try{return(await o.get(`${s}${n.AUTH.NOTIFICATIONS}/system`,{headers:a()})).data}catch(r){return console.error("Error checking system notifications:",r),{Number_Of_Notifications:0}}},getAllNotifications:async()=>{try{return(await o.get(`${s}${n.AUTH.NOTIFICATIONS}/get_all`,{headers:a()})).data}catch(r){return console.error("Error fetching all notifications:",r),{notifications:[]}}},markNotificationAsRead:async r=>{try{return(await o.post(`${s}${n.AUTH.NOTIFICATIONS}/read_one?notification_id=${r}`,{},{headers:a()})).data}catch(e){throw console.error("Error marking notification as read:",e),e}},markAllNotificationsAsRead:async()=>{try{return(await o.post(`${s}${n.AUTH.NOTIFICATIONS}/read_all`,{},{headers:a()})).data}catch(r){throw console.error("Error marking all notifications as read:",r),r}},deleteNotification:async r=>{try{return(await o.delete(`${s}${n.AUTH.NOTIFICATIONS}/delete?notification_id=${r}`,{headers:a()})).data}catch(e){throw console.error("Error deleting notification:",e),e}}}};export{u as a};
