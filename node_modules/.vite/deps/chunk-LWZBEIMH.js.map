{
  "version": 3,
  "sources": ["../../fast-diff/diff.js", "../../quill-delta/src/AttributeMap.ts", "../../quill-delta/src/Op.ts", "../../quill-delta/src/OpIterator.ts", "../../quill-delta/src/Delta.ts"],
  "sourcesContent": ["/**\r\n * This library modifies the diff-patch-match library by Neil Fraser\r\n * by removing the patch and match functionality and certain advanced\r\n * options in the diff function. The original license is as follows:\r\n *\r\n * ===\r\n *\r\n * Diff Match and Patch\r\n *\r\n * Copyright 2006 Google Inc.\r\n * http://code.google.com/p/google-diff-match-patch/\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * The data structure representing a diff is an array of tuples:\r\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\r\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\r\n */\r\nvar DIFF_DELETE = -1;\r\nvar DIFF_INSERT = 1;\r\nvar DIFF_EQUAL = 0;\r\n\r\n/**\r\n * Find the differences between two texts.  Simplifies the problem by stripping\r\n * any common prefix or suffix off the texts before diffing.\r\n * @param {string} text1 Old string to be diffed.\r\n * @param {string} text2 New string to be diffed.\r\n * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info\r\n * @param {boolean} [cleanup] Apply semantic cleanup before returning.\r\n * @return {Array} Array of diff tuples.\r\n */\r\nfunction diff_main(text1, text2, cursor_pos, cleanup, _fix_unicode) {\r\n  // Check for equality\r\n  if (text1 === text2) {\r\n    if (text1) {\r\n      return [[DIFF_EQUAL, text1]];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  if (cursor_pos != null) {\r\n    var editdiff = find_cursor_edit_diff(text1, text2, cursor_pos);\r\n    if (editdiff) {\r\n      return editdiff;\r\n    }\r\n  }\r\n\r\n  // Trim off common prefix (speedup).\r\n  var commonlength = diff_commonPrefix(text1, text2);\r\n  var commonprefix = text1.substring(0, commonlength);\r\n  text1 = text1.substring(commonlength);\r\n  text2 = text2.substring(commonlength);\r\n\r\n  // Trim off common suffix (speedup).\r\n  commonlength = diff_commonSuffix(text1, text2);\r\n  var commonsuffix = text1.substring(text1.length - commonlength);\r\n  text1 = text1.substring(0, text1.length - commonlength);\r\n  text2 = text2.substring(0, text2.length - commonlength);\r\n\r\n  // Compute the diff on the middle block.\r\n  var diffs = diff_compute_(text1, text2);\r\n\r\n  // Restore the prefix and suffix.\r\n  if (commonprefix) {\r\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\r\n  }\r\n  if (commonsuffix) {\r\n    diffs.push([DIFF_EQUAL, commonsuffix]);\r\n  }\r\n  diff_cleanupMerge(diffs, _fix_unicode);\r\n  if (cleanup) {\r\n    diff_cleanupSemantic(diffs);\r\n  }\r\n  return diffs;\r\n}\r\n\r\n/**\r\n * Find the differences between two texts.  Assumes that the texts do not\r\n * have any common prefix or suffix.\r\n * @param {string} text1 Old string to be diffed.\r\n * @param {string} text2 New string to be diffed.\r\n * @return {Array} Array of diff tuples.\r\n */\r\nfunction diff_compute_(text1, text2) {\r\n  var diffs;\r\n\r\n  if (!text1) {\r\n    // Just add some text (speedup).\r\n    return [[DIFF_INSERT, text2]];\r\n  }\r\n\r\n  if (!text2) {\r\n    // Just delete some text (speedup).\r\n    return [[DIFF_DELETE, text1]];\r\n  }\r\n\r\n  var longtext = text1.length > text2.length ? text1 : text2;\r\n  var shorttext = text1.length > text2.length ? text2 : text1;\r\n  var i = longtext.indexOf(shorttext);\r\n  if (i !== -1) {\r\n    // Shorter text is inside the longer text (speedup).\r\n    diffs = [\r\n      [DIFF_INSERT, longtext.substring(0, i)],\r\n      [DIFF_EQUAL, shorttext],\r\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)],\r\n    ];\r\n    // Swap insertions for deletions if diff is reversed.\r\n    if (text1.length > text2.length) {\r\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\r\n    }\r\n    return diffs;\r\n  }\r\n\r\n  if (shorttext.length === 1) {\r\n    // Single character string.\r\n    // After the previous speedup, the character can't be an equality.\r\n    return [\r\n      [DIFF_DELETE, text1],\r\n      [DIFF_INSERT, text2],\r\n    ];\r\n  }\r\n\r\n  // Check to see if the problem can be split in two.\r\n  var hm = diff_halfMatch_(text1, text2);\r\n  if (hm) {\r\n    // A half-match was found, sort out the return data.\r\n    var text1_a = hm[0];\r\n    var text1_b = hm[1];\r\n    var text2_a = hm[2];\r\n    var text2_b = hm[3];\r\n    var mid_common = hm[4];\r\n    // Send both pairs off for separate processing.\r\n    var diffs_a = diff_main(text1_a, text2_a);\r\n    var diffs_b = diff_main(text1_b, text2_b);\r\n    // Merge the results.\r\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\r\n  }\r\n\r\n  return diff_bisect_(text1, text2);\r\n}\r\n\r\n/**\r\n * Find the 'middle snake' of a diff, split the problem in two\r\n * and return the recursively constructed diff.\r\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\r\n * @param {string} text1 Old string to be diffed.\r\n * @param {string} text2 New string to be diffed.\r\n * @return {Array} Array of diff tuples.\r\n * @private\r\n */\r\nfunction diff_bisect_(text1, text2) {\r\n  // Cache the text lengths to prevent multiple calls.\r\n  var text1_length = text1.length;\r\n  var text2_length = text2.length;\r\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\r\n  var v_offset = max_d;\r\n  var v_length = 2 * max_d;\r\n  var v1 = new Array(v_length);\r\n  var v2 = new Array(v_length);\r\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\r\n  // integers and undefined.\r\n  for (var x = 0; x < v_length; x++) {\r\n    v1[x] = -1;\r\n    v2[x] = -1;\r\n  }\r\n  v1[v_offset + 1] = 0;\r\n  v2[v_offset + 1] = 0;\r\n  var delta = text1_length - text2_length;\r\n  // If the total number of characters is odd, then the front path will collide\r\n  // with the reverse path.\r\n  var front = delta % 2 !== 0;\r\n  // Offsets for start and end of k loop.\r\n  // Prevents mapping of space beyond the grid.\r\n  var k1start = 0;\r\n  var k1end = 0;\r\n  var k2start = 0;\r\n  var k2end = 0;\r\n  for (var d = 0; d < max_d; d++) {\r\n    // Walk the front path one step.\r\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\r\n      var k1_offset = v_offset + k1;\r\n      var x1;\r\n      if (k1 === -d || (k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\r\n        x1 = v1[k1_offset + 1];\r\n      } else {\r\n        x1 = v1[k1_offset - 1] + 1;\r\n      }\r\n      var y1 = x1 - k1;\r\n      while (\r\n        x1 < text1_length &&\r\n        y1 < text2_length &&\r\n        text1.charAt(x1) === text2.charAt(y1)\r\n      ) {\r\n        x1++;\r\n        y1++;\r\n      }\r\n      v1[k1_offset] = x1;\r\n      if (x1 > text1_length) {\r\n        // Ran off the right of the graph.\r\n        k1end += 2;\r\n      } else if (y1 > text2_length) {\r\n        // Ran off the bottom of the graph.\r\n        k1start += 2;\r\n      } else if (front) {\r\n        var k2_offset = v_offset + delta - k1;\r\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {\r\n          // Mirror x2 onto top-left coordinate system.\r\n          var x2 = text1_length - v2[k2_offset];\r\n          if (x1 >= x2) {\r\n            // Overlap detected.\r\n            return diff_bisectSplit_(text1, text2, x1, y1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Walk the reverse path one step.\r\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\r\n      var k2_offset = v_offset + k2;\r\n      var x2;\r\n      if (k2 === -d || (k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\r\n        x2 = v2[k2_offset + 1];\r\n      } else {\r\n        x2 = v2[k2_offset - 1] + 1;\r\n      }\r\n      var y2 = x2 - k2;\r\n      while (\r\n        x2 < text1_length &&\r\n        y2 < text2_length &&\r\n        text1.charAt(text1_length - x2 - 1) ===\r\n          text2.charAt(text2_length - y2 - 1)\r\n      ) {\r\n        x2++;\r\n        y2++;\r\n      }\r\n      v2[k2_offset] = x2;\r\n      if (x2 > text1_length) {\r\n        // Ran off the left of the graph.\r\n        k2end += 2;\r\n      } else if (y2 > text2_length) {\r\n        // Ran off the top of the graph.\r\n        k2start += 2;\r\n      } else if (!front) {\r\n        var k1_offset = v_offset + delta - k2;\r\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {\r\n          var x1 = v1[k1_offset];\r\n          var y1 = v_offset + x1 - k1_offset;\r\n          // Mirror x2 onto top-left coordinate system.\r\n          x2 = text1_length - x2;\r\n          if (x1 >= x2) {\r\n            // Overlap detected.\r\n            return diff_bisectSplit_(text1, text2, x1, y1);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // Diff took too long and hit the deadline or\r\n  // number of diffs equals number of characters, no commonality at all.\r\n  return [\r\n    [DIFF_DELETE, text1],\r\n    [DIFF_INSERT, text2],\r\n  ];\r\n}\r\n\r\n/**\r\n * Given the location of the 'middle snake', split the diff in two parts\r\n * and recurse.\r\n * @param {string} text1 Old string to be diffed.\r\n * @param {string} text2 New string to be diffed.\r\n * @param {number} x Index of split point in text1.\r\n * @param {number} y Index of split point in text2.\r\n * @return {Array} Array of diff tuples.\r\n */\r\nfunction diff_bisectSplit_(text1, text2, x, y) {\r\n  var text1a = text1.substring(0, x);\r\n  var text2a = text2.substring(0, y);\r\n  var text1b = text1.substring(x);\r\n  var text2b = text2.substring(y);\r\n\r\n  // Compute both diffs serially.\r\n  var diffs = diff_main(text1a, text2a);\r\n  var diffsb = diff_main(text1b, text2b);\r\n\r\n  return diffs.concat(diffsb);\r\n}\r\n\r\n/**\r\n * Determine the common prefix of two strings.\r\n * @param {string} text1 First string.\r\n * @param {string} text2 Second string.\r\n * @return {number} The number of characters common to the start of each\r\n *     string.\r\n */\r\nfunction diff_commonPrefix(text1, text2) {\r\n  // Quick check for common null cases.\r\n  if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {\r\n    return 0;\r\n  }\r\n  // Binary search.\r\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\r\n  var pointermin = 0;\r\n  var pointermax = Math.min(text1.length, text2.length);\r\n  var pointermid = pointermax;\r\n  var pointerstart = 0;\r\n  while (pointermin < pointermid) {\r\n    if (\r\n      text1.substring(pointerstart, pointermid) ==\r\n      text2.substring(pointerstart, pointermid)\r\n    ) {\r\n      pointermin = pointermid;\r\n      pointerstart = pointermin;\r\n    } else {\r\n      pointermax = pointermid;\r\n    }\r\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\r\n  }\r\n\r\n  if (is_surrogate_pair_start(text1.charCodeAt(pointermid - 1))) {\r\n    pointermid--;\r\n  }\r\n\r\n  return pointermid;\r\n}\r\n\r\n/**\r\n * Determine if the suffix of one string is the prefix of another.\r\n * @param {string} text1 First string.\r\n * @param {string} text2 Second string.\r\n * @return {number} The number of characters common to the end of the first\r\n *     string and the start of the second string.\r\n * @private\r\n */\r\nfunction diff_commonOverlap_(text1, text2) {\r\n  // Cache the text lengths to prevent multiple calls.\r\n  var text1_length = text1.length;\r\n  var text2_length = text2.length;\r\n  // Eliminate the null case.\r\n  if (text1_length == 0 || text2_length == 0) {\r\n    return 0;\r\n  }\r\n  // Truncate the longer string.\r\n  if (text1_length > text2_length) {\r\n    text1 = text1.substring(text1_length - text2_length);\r\n  } else if (text1_length < text2_length) {\r\n    text2 = text2.substring(0, text1_length);\r\n  }\r\n  var text_length = Math.min(text1_length, text2_length);\r\n  // Quick check for the worst case.\r\n  if (text1 == text2) {\r\n    return text_length;\r\n  }\r\n\r\n  // Start by looking for a single character match\r\n  // and increase length until no match is found.\r\n  // Performance analysis: http://neil.fraser.name/news/2010/11/04/\r\n  var best = 0;\r\n  var length = 1;\r\n  while (true) {\r\n    var pattern = text1.substring(text_length - length);\r\n    var found = text2.indexOf(pattern);\r\n    if (found == -1) {\r\n      return best;\r\n    }\r\n    length += found;\r\n    if (\r\n      found == 0 ||\r\n      text1.substring(text_length - length) == text2.substring(0, length)\r\n    ) {\r\n      best = length;\r\n      length++;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Determine the common suffix of two strings.\r\n * @param {string} text1 First string.\r\n * @param {string} text2 Second string.\r\n * @return {number} The number of characters common to the end of each string.\r\n */\r\nfunction diff_commonSuffix(text1, text2) {\r\n  // Quick check for common null cases.\r\n  if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {\r\n    return 0;\r\n  }\r\n  // Binary search.\r\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\r\n  var pointermin = 0;\r\n  var pointermax = Math.min(text1.length, text2.length);\r\n  var pointermid = pointermax;\r\n  var pointerend = 0;\r\n  while (pointermin < pointermid) {\r\n    if (\r\n      text1.substring(text1.length - pointermid, text1.length - pointerend) ==\r\n      text2.substring(text2.length - pointermid, text2.length - pointerend)\r\n    ) {\r\n      pointermin = pointermid;\r\n      pointerend = pointermin;\r\n    } else {\r\n      pointermax = pointermid;\r\n    }\r\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\r\n  }\r\n\r\n  if (is_surrogate_pair_end(text1.charCodeAt(text1.length - pointermid))) {\r\n    pointermid--;\r\n  }\r\n\r\n  return pointermid;\r\n}\r\n\r\n/**\r\n * Do the two texts share a substring which is at least half the length of the\r\n * longer text?\r\n * This speedup can produce non-minimal diffs.\r\n * @param {string} text1 First string.\r\n * @param {string} text2 Second string.\r\n * @return {Array.<string>} Five element Array, containing the prefix of\r\n *     text1, the suffix of text1, the prefix of text2, the suffix of\r\n *     text2 and the common middle.  Or null if there was no match.\r\n */\r\nfunction diff_halfMatch_(text1, text2) {\r\n  var longtext = text1.length > text2.length ? text1 : text2;\r\n  var shorttext = text1.length > text2.length ? text2 : text1;\r\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\r\n    return null; // Pointless.\r\n  }\r\n\r\n  /**\r\n   * Does a substring of shorttext exist within longtext such that the substring\r\n   * is at least half the length of longtext?\r\n   * Closure, but does not reference any external variables.\r\n   * @param {string} longtext Longer string.\r\n   * @param {string} shorttext Shorter string.\r\n   * @param {number} i Start index of quarter length substring within longtext.\r\n   * @return {Array.<string>} Five element Array, containing the prefix of\r\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\r\n   *     of shorttext and the common middle.  Or null if there was no match.\r\n   * @private\r\n   */\r\n  function diff_halfMatchI_(longtext, shorttext, i) {\r\n    // Start with a 1/4 length substring at position i as a seed.\r\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\r\n    var j = -1;\r\n    var best_common = \"\";\r\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\r\n    while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {\r\n      var prefixLength = diff_commonPrefix(\r\n        longtext.substring(i),\r\n        shorttext.substring(j)\r\n      );\r\n      var suffixLength = diff_commonSuffix(\r\n        longtext.substring(0, i),\r\n        shorttext.substring(0, j)\r\n      );\r\n      if (best_common.length < suffixLength + prefixLength) {\r\n        best_common =\r\n          shorttext.substring(j - suffixLength, j) +\r\n          shorttext.substring(j, j + prefixLength);\r\n        best_longtext_a = longtext.substring(0, i - suffixLength);\r\n        best_longtext_b = longtext.substring(i + prefixLength);\r\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\r\n        best_shorttext_b = shorttext.substring(j + prefixLength);\r\n      }\r\n    }\r\n    if (best_common.length * 2 >= longtext.length) {\r\n      return [\r\n        best_longtext_a,\r\n        best_longtext_b,\r\n        best_shorttext_a,\r\n        best_shorttext_b,\r\n        best_common,\r\n      ];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // First check if the second quarter is the seed for a half-match.\r\n  var hm1 = diff_halfMatchI_(\r\n    longtext,\r\n    shorttext,\r\n    Math.ceil(longtext.length / 4)\r\n  );\r\n  // Check again based on the third quarter.\r\n  var hm2 = diff_halfMatchI_(\r\n    longtext,\r\n    shorttext,\r\n    Math.ceil(longtext.length / 2)\r\n  );\r\n  var hm;\r\n  if (!hm1 && !hm2) {\r\n    return null;\r\n  } else if (!hm2) {\r\n    hm = hm1;\r\n  } else if (!hm1) {\r\n    hm = hm2;\r\n  } else {\r\n    // Both matched.  Select the longest.\r\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\r\n  }\r\n\r\n  // A half-match was found, sort out the return data.\r\n  var text1_a, text1_b, text2_a, text2_b;\r\n  if (text1.length > text2.length) {\r\n    text1_a = hm[0];\r\n    text1_b = hm[1];\r\n    text2_a = hm[2];\r\n    text2_b = hm[3];\r\n  } else {\r\n    text2_a = hm[0];\r\n    text2_b = hm[1];\r\n    text1_a = hm[2];\r\n    text1_b = hm[3];\r\n  }\r\n  var mid_common = hm[4];\r\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\r\n}\r\n\r\n/**\r\n * Reduce the number of edits by eliminating semantically trivial equalities.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n */\r\nfunction diff_cleanupSemantic(diffs) {\r\n  var changes = false;\r\n  var equalities = []; // Stack of indices where equalities are found.\r\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\r\n  /** @type {?string} */\r\n  var lastequality = null;\r\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\r\n  var pointer = 0; // Index of current position.\r\n  // Number of characters that changed prior to the equality.\r\n  var length_insertions1 = 0;\r\n  var length_deletions1 = 0;\r\n  // Number of characters that changed after the equality.\r\n  var length_insertions2 = 0;\r\n  var length_deletions2 = 0;\r\n  while (pointer < diffs.length) {\r\n    if (diffs[pointer][0] == DIFF_EQUAL) {\r\n      // Equality found.\r\n      equalities[equalitiesLength++] = pointer;\r\n      length_insertions1 = length_insertions2;\r\n      length_deletions1 = length_deletions2;\r\n      length_insertions2 = 0;\r\n      length_deletions2 = 0;\r\n      lastequality = diffs[pointer][1];\r\n    } else {\r\n      // An insertion or deletion.\r\n      if (diffs[pointer][0] == DIFF_INSERT) {\r\n        length_insertions2 += diffs[pointer][1].length;\r\n      } else {\r\n        length_deletions2 += diffs[pointer][1].length;\r\n      }\r\n      // Eliminate an equality that is smaller or equal to the edits on both\r\n      // sides of it.\r\n      if (\r\n        lastequality &&\r\n        lastequality.length <=\r\n          Math.max(length_insertions1, length_deletions1) &&\r\n        lastequality.length <= Math.max(length_insertions2, length_deletions2)\r\n      ) {\r\n        // Duplicate record.\r\n        diffs.splice(equalities[equalitiesLength - 1], 0, [\r\n          DIFF_DELETE,\r\n          lastequality,\r\n        ]);\r\n        // Change second copy to insert.\r\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\r\n        // Throw away the equality we just deleted.\r\n        equalitiesLength--;\r\n        // Throw away the previous equality (it needs to be reevaluated).\r\n        equalitiesLength--;\r\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\r\n        length_insertions1 = 0; // Reset the counters.\r\n        length_deletions1 = 0;\r\n        length_insertions2 = 0;\r\n        length_deletions2 = 0;\r\n        lastequality = null;\r\n        changes = true;\r\n      }\r\n    }\r\n    pointer++;\r\n  }\r\n\r\n  // Normalize the diff.\r\n  if (changes) {\r\n    diff_cleanupMerge(diffs);\r\n  }\r\n  diff_cleanupSemanticLossless(diffs);\r\n\r\n  // Find any overlaps between deletions and insertions.\r\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\r\n  //   -> <del>abc</del>xxx<ins>def</ins>\r\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\r\n  //   -> <ins>def</ins>xxx<del>abc</del>\r\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\r\n  pointer = 1;\r\n  while (pointer < diffs.length) {\r\n    if (\r\n      diffs[pointer - 1][0] == DIFF_DELETE &&\r\n      diffs[pointer][0] == DIFF_INSERT\r\n    ) {\r\n      var deletion = diffs[pointer - 1][1];\r\n      var insertion = diffs[pointer][1];\r\n      var overlap_length1 = diff_commonOverlap_(deletion, insertion);\r\n      var overlap_length2 = diff_commonOverlap_(insertion, deletion);\r\n      if (overlap_length1 >= overlap_length2) {\r\n        if (\r\n          overlap_length1 >= deletion.length / 2 ||\r\n          overlap_length1 >= insertion.length / 2\r\n        ) {\r\n          // Overlap found.  Insert an equality and trim the surrounding edits.\r\n          diffs.splice(pointer, 0, [\r\n            DIFF_EQUAL,\r\n            insertion.substring(0, overlap_length1),\r\n          ]);\r\n          diffs[pointer - 1][1] = deletion.substring(\r\n            0,\r\n            deletion.length - overlap_length1\r\n          );\r\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\r\n          pointer++;\r\n        }\r\n      } else {\r\n        if (\r\n          overlap_length2 >= deletion.length / 2 ||\r\n          overlap_length2 >= insertion.length / 2\r\n        ) {\r\n          // Reverse overlap found.\r\n          // Insert an equality and swap and trim the surrounding edits.\r\n          diffs.splice(pointer, 0, [\r\n            DIFF_EQUAL,\r\n            deletion.substring(0, overlap_length2),\r\n          ]);\r\n          diffs[pointer - 1][0] = DIFF_INSERT;\r\n          diffs[pointer - 1][1] = insertion.substring(\r\n            0,\r\n            insertion.length - overlap_length2\r\n          );\r\n          diffs[pointer + 1][0] = DIFF_DELETE;\r\n          diffs[pointer + 1][1] = deletion.substring(overlap_length2);\r\n          pointer++;\r\n        }\r\n      }\r\n      pointer++;\r\n    }\r\n    pointer++;\r\n  }\r\n}\r\n\r\nvar nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\r\nvar whitespaceRegex_ = /\\s/;\r\nvar linebreakRegex_ = /[\\r\\n]/;\r\nvar blanklineEndRegex_ = /\\n\\r?\\n$/;\r\nvar blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\r\n\r\n/**\r\n * Look for single edits surrounded on both sides by equalities\r\n * which can be shifted sideways to align the edit to a word boundary.\r\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\r\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\r\n */\r\nfunction diff_cleanupSemanticLossless(diffs) {\r\n  /**\r\n   * Given two strings, compute a score representing whether the internal\r\n   * boundary falls on logical boundaries.\r\n   * Scores range from 6 (best) to 0 (worst).\r\n   * Closure, but does not reference any external variables.\r\n   * @param {string} one First string.\r\n   * @param {string} two Second string.\r\n   * @return {number} The score.\r\n   * @private\r\n   */\r\n  function diff_cleanupSemanticScore_(one, two) {\r\n    if (!one || !two) {\r\n      // Edges are the best.\r\n      return 6;\r\n    }\r\n\r\n    // Each port of this function behaves slightly differently due to\r\n    // subtle differences in each language's definition of things like\r\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\r\n    // the choice has been made to use each language's native features\r\n    // rather than force total conformity.\r\n    var char1 = one.charAt(one.length - 1);\r\n    var char2 = two.charAt(0);\r\n    var nonAlphaNumeric1 = char1.match(nonAlphaNumericRegex_);\r\n    var nonAlphaNumeric2 = char2.match(nonAlphaNumericRegex_);\r\n    var whitespace1 = nonAlphaNumeric1 && char1.match(whitespaceRegex_);\r\n    var whitespace2 = nonAlphaNumeric2 && char2.match(whitespaceRegex_);\r\n    var lineBreak1 = whitespace1 && char1.match(linebreakRegex_);\r\n    var lineBreak2 = whitespace2 && char2.match(linebreakRegex_);\r\n    var blankLine1 = lineBreak1 && one.match(blanklineEndRegex_);\r\n    var blankLine2 = lineBreak2 && two.match(blanklineStartRegex_);\r\n\r\n    if (blankLine1 || blankLine2) {\r\n      // Five points for blank lines.\r\n      return 5;\r\n    } else if (lineBreak1 || lineBreak2) {\r\n      // Four points for line breaks.\r\n      return 4;\r\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\r\n      // Three points for end of sentences.\r\n      return 3;\r\n    } else if (whitespace1 || whitespace2) {\r\n      // Two points for whitespace.\r\n      return 2;\r\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\r\n      // One point for non-alphanumeric.\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  var pointer = 1;\r\n  // Intentionally ignore the first and last element (don't need checking).\r\n  while (pointer < diffs.length - 1) {\r\n    if (\r\n      diffs[pointer - 1][0] == DIFF_EQUAL &&\r\n      diffs[pointer + 1][0] == DIFF_EQUAL\r\n    ) {\r\n      // This is a single edit surrounded by equalities.\r\n      var equality1 = diffs[pointer - 1][1];\r\n      var edit = diffs[pointer][1];\r\n      var equality2 = diffs[pointer + 1][1];\r\n\r\n      // First, shift the edit as far left as possible.\r\n      var commonOffset = diff_commonSuffix(equality1, edit);\r\n      if (commonOffset) {\r\n        var commonString = edit.substring(edit.length - commonOffset);\r\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\r\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\r\n        equality2 = commonString + equality2;\r\n      }\r\n\r\n      // Second, step character by character right, looking for the best fit.\r\n      var bestEquality1 = equality1;\r\n      var bestEdit = edit;\r\n      var bestEquality2 = equality2;\r\n      var bestScore =\r\n        diff_cleanupSemanticScore_(equality1, edit) +\r\n        diff_cleanupSemanticScore_(edit, equality2);\r\n      while (edit.charAt(0) === equality2.charAt(0)) {\r\n        equality1 += edit.charAt(0);\r\n        edit = edit.substring(1) + equality2.charAt(0);\r\n        equality2 = equality2.substring(1);\r\n        var score =\r\n          diff_cleanupSemanticScore_(equality1, edit) +\r\n          diff_cleanupSemanticScore_(edit, equality2);\r\n        // The >= encourages trailing rather than leading whitespace on edits.\r\n        if (score >= bestScore) {\r\n          bestScore = score;\r\n          bestEquality1 = equality1;\r\n          bestEdit = edit;\r\n          bestEquality2 = equality2;\r\n        }\r\n      }\r\n\r\n      if (diffs[pointer - 1][1] != bestEquality1) {\r\n        // We have an improvement, save it back to the diff.\r\n        if (bestEquality1) {\r\n          diffs[pointer - 1][1] = bestEquality1;\r\n        } else {\r\n          diffs.splice(pointer - 1, 1);\r\n          pointer--;\r\n        }\r\n        diffs[pointer][1] = bestEdit;\r\n        if (bestEquality2) {\r\n          diffs[pointer + 1][1] = bestEquality2;\r\n        } else {\r\n          diffs.splice(pointer + 1, 1);\r\n          pointer--;\r\n        }\r\n      }\r\n    }\r\n    pointer++;\r\n  }\r\n}\r\n\r\n/**\r\n * Reorder and merge like edit sections.  Merge equalities.\r\n * Any edit section can move as long as it doesn't cross an equality.\r\n * @param {Array} diffs Array of diff tuples.\r\n * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff\r\n */\r\nfunction diff_cleanupMerge(diffs, fix_unicode) {\r\n  diffs.push([DIFF_EQUAL, \"\"]); // Add a dummy entry at the end.\r\n  var pointer = 0;\r\n  var count_delete = 0;\r\n  var count_insert = 0;\r\n  var text_delete = \"\";\r\n  var text_insert = \"\";\r\n  var commonlength;\r\n  while (pointer < diffs.length) {\r\n    if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\r\n      diffs.splice(pointer, 1);\r\n      continue;\r\n    }\r\n    switch (diffs[pointer][0]) {\r\n      case DIFF_INSERT:\r\n        count_insert++;\r\n        text_insert += diffs[pointer][1];\r\n        pointer++;\r\n        break;\r\n      case DIFF_DELETE:\r\n        count_delete++;\r\n        text_delete += diffs[pointer][1];\r\n        pointer++;\r\n        break;\r\n      case DIFF_EQUAL:\r\n        var previous_equality = pointer - count_insert - count_delete - 1;\r\n        if (fix_unicode) {\r\n          // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,\r\n          // we assume that the old and new text in the diff are complete and correct\r\n          // unicode-encoded JS strings, but the tuple boundaries may fall between\r\n          // surrogate pairs.  we fix this by shaving off stray surrogates from the end\r\n          // of the previous equality and the beginning of this equality.  this may create\r\n          // empty equalities or a common prefix or suffix.  for example, if AB and AC are\r\n          // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and\r\n          // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this\r\n          // particular case, both equalities go away, we absorb any previous inequalities,\r\n          // and we keep scanning for the next equality before rewriting the tuples.\r\n          if (\r\n            previous_equality >= 0 &&\r\n            ends_with_pair_start(diffs[previous_equality][1])\r\n          ) {\r\n            var stray = diffs[previous_equality][1].slice(-1);\r\n            diffs[previous_equality][1] = diffs[previous_equality][1].slice(\r\n              0,\r\n              -1\r\n            );\r\n            text_delete = stray + text_delete;\r\n            text_insert = stray + text_insert;\r\n            if (!diffs[previous_equality][1]) {\r\n              // emptied out previous equality, so delete it and include previous delete/insert\r\n              diffs.splice(previous_equality, 1);\r\n              pointer--;\r\n              var k = previous_equality - 1;\r\n              if (diffs[k] && diffs[k][0] === DIFF_INSERT) {\r\n                count_insert++;\r\n                text_insert = diffs[k][1] + text_insert;\r\n                k--;\r\n              }\r\n              if (diffs[k] && diffs[k][0] === DIFF_DELETE) {\r\n                count_delete++;\r\n                text_delete = diffs[k][1] + text_delete;\r\n                k--;\r\n              }\r\n              previous_equality = k;\r\n            }\r\n          }\r\n          if (starts_with_pair_end(diffs[pointer][1])) {\r\n            var stray = diffs[pointer][1].charAt(0);\r\n            diffs[pointer][1] = diffs[pointer][1].slice(1);\r\n            text_delete += stray;\r\n            text_insert += stray;\r\n          }\r\n        }\r\n        if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\r\n          // for empty equality not at end, wait for next equality\r\n          diffs.splice(pointer, 1);\r\n          break;\r\n        }\r\n        if (text_delete.length > 0 || text_insert.length > 0) {\r\n          // note that diff_commonPrefix and diff_commonSuffix are unicode-aware\r\n          if (text_delete.length > 0 && text_insert.length > 0) {\r\n            // Factor out any common prefixes.\r\n            commonlength = diff_commonPrefix(text_insert, text_delete);\r\n            if (commonlength !== 0) {\r\n              if (previous_equality >= 0) {\r\n                diffs[previous_equality][1] += text_insert.substring(\r\n                  0,\r\n                  commonlength\r\n                );\r\n              } else {\r\n                diffs.splice(0, 0, [\r\n                  DIFF_EQUAL,\r\n                  text_insert.substring(0, commonlength),\r\n                ]);\r\n                pointer++;\r\n              }\r\n              text_insert = text_insert.substring(commonlength);\r\n              text_delete = text_delete.substring(commonlength);\r\n            }\r\n            // Factor out any common suffixes.\r\n            commonlength = diff_commonSuffix(text_insert, text_delete);\r\n            if (commonlength !== 0) {\r\n              diffs[pointer][1] =\r\n                text_insert.substring(text_insert.length - commonlength) +\r\n                diffs[pointer][1];\r\n              text_insert = text_insert.substring(\r\n                0,\r\n                text_insert.length - commonlength\r\n              );\r\n              text_delete = text_delete.substring(\r\n                0,\r\n                text_delete.length - commonlength\r\n              );\r\n            }\r\n          }\r\n          // Delete the offending records and add the merged ones.\r\n          var n = count_insert + count_delete;\r\n          if (text_delete.length === 0 && text_insert.length === 0) {\r\n            diffs.splice(pointer - n, n);\r\n            pointer = pointer - n;\r\n          } else if (text_delete.length === 0) {\r\n            diffs.splice(pointer - n, n, [DIFF_INSERT, text_insert]);\r\n            pointer = pointer - n + 1;\r\n          } else if (text_insert.length === 0) {\r\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete]);\r\n            pointer = pointer - n + 1;\r\n          } else {\r\n            diffs.splice(\r\n              pointer - n,\r\n              n,\r\n              [DIFF_DELETE, text_delete],\r\n              [DIFF_INSERT, text_insert]\r\n            );\r\n            pointer = pointer - n + 2;\r\n          }\r\n        }\r\n        if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\r\n          // Merge this equality with the previous one.\r\n          diffs[pointer - 1][1] += diffs[pointer][1];\r\n          diffs.splice(pointer, 1);\r\n        } else {\r\n          pointer++;\r\n        }\r\n        count_insert = 0;\r\n        count_delete = 0;\r\n        text_delete = \"\";\r\n        text_insert = \"\";\r\n        break;\r\n    }\r\n  }\r\n  if (diffs[diffs.length - 1][1] === \"\") {\r\n    diffs.pop(); // Remove the dummy entry at the end.\r\n  }\r\n\r\n  // Second pass: look for single edits surrounded on both sides by equalities\r\n  // which can be shifted sideways to eliminate an equality.\r\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\r\n  var changes = false;\r\n  pointer = 1;\r\n  // Intentionally ignore the first and last element (don't need checking).\r\n  while (pointer < diffs.length - 1) {\r\n    if (\r\n      diffs[pointer - 1][0] === DIFF_EQUAL &&\r\n      diffs[pointer + 1][0] === DIFF_EQUAL\r\n    ) {\r\n      // This is a single edit surrounded by equalities.\r\n      if (\r\n        diffs[pointer][1].substring(\r\n          diffs[pointer][1].length - diffs[pointer - 1][1].length\r\n        ) === diffs[pointer - 1][1]\r\n      ) {\r\n        // Shift the edit over the previous equality.\r\n        diffs[pointer][1] =\r\n          diffs[pointer - 1][1] +\r\n          diffs[pointer][1].substring(\r\n            0,\r\n            diffs[pointer][1].length - diffs[pointer - 1][1].length\r\n          );\r\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\r\n        diffs.splice(pointer - 1, 1);\r\n        changes = true;\r\n      } else if (\r\n        diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\r\n        diffs[pointer + 1][1]\r\n      ) {\r\n        // Shift the edit over the next equality.\r\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\r\n        diffs[pointer][1] =\r\n          diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\r\n          diffs[pointer + 1][1];\r\n        diffs.splice(pointer + 1, 1);\r\n        changes = true;\r\n      }\r\n    }\r\n    pointer++;\r\n  }\r\n  // If shifts were made, the diff needs reordering and another shift sweep.\r\n  if (changes) {\r\n    diff_cleanupMerge(diffs, fix_unicode);\r\n  }\r\n}\r\n\r\nfunction is_surrogate_pair_start(charCode) {\r\n  return charCode >= 0xd800 && charCode <= 0xdbff;\r\n}\r\n\r\nfunction is_surrogate_pair_end(charCode) {\r\n  return charCode >= 0xdc00 && charCode <= 0xdfff;\r\n}\r\n\r\nfunction starts_with_pair_end(str) {\r\n  return is_surrogate_pair_end(str.charCodeAt(0));\r\n}\r\n\r\nfunction ends_with_pair_start(str) {\r\n  return is_surrogate_pair_start(str.charCodeAt(str.length - 1));\r\n}\r\n\r\nfunction remove_empty_tuples(tuples) {\r\n  var ret = [];\r\n  for (var i = 0; i < tuples.length; i++) {\r\n    if (tuples[i][1].length > 0) {\r\n      ret.push(tuples[i]);\r\n    }\r\n  }\r\n  return ret;\r\n}\r\n\r\nfunction make_edit_splice(before, oldMiddle, newMiddle, after) {\r\n  if (ends_with_pair_start(before) || starts_with_pair_end(after)) {\r\n    return null;\r\n  }\r\n  return remove_empty_tuples([\r\n    [DIFF_EQUAL, before],\r\n    [DIFF_DELETE, oldMiddle],\r\n    [DIFF_INSERT, newMiddle],\r\n    [DIFF_EQUAL, after],\r\n  ]);\r\n}\r\n\r\nfunction find_cursor_edit_diff(oldText, newText, cursor_pos) {\r\n  // note: this runs after equality check has ruled out exact equality\r\n  var oldRange =\r\n    typeof cursor_pos === \"number\"\r\n      ? { index: cursor_pos, length: 0 }\r\n      : cursor_pos.oldRange;\r\n  var newRange = typeof cursor_pos === \"number\" ? null : cursor_pos.newRange;\r\n  // take into account the old and new selection to generate the best diff\r\n  // possible for a text edit.  for example, a text change from \"xxx\" to \"xx\"\r\n  // could be a delete or forwards-delete of any one of the x's, or the\r\n  // result of selecting two of the x's and typing \"x\".\r\n  var oldLength = oldText.length;\r\n  var newLength = newText.length;\r\n  if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {\r\n    // see if we have an insert or delete before or after cursor\r\n    var oldCursor = oldRange.index;\r\n    var oldBefore = oldText.slice(0, oldCursor);\r\n    var oldAfter = oldText.slice(oldCursor);\r\n    var maybeNewCursor = newRange ? newRange.index : null;\r\n    editBefore: {\r\n      // is this an insert or delete right before oldCursor?\r\n      var newCursor = oldCursor + newLength - oldLength;\r\n      if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {\r\n        break editBefore;\r\n      }\r\n      if (newCursor < 0 || newCursor > newLength) {\r\n        break editBefore;\r\n      }\r\n      var newBefore = newText.slice(0, newCursor);\r\n      var newAfter = newText.slice(newCursor);\r\n      if (newAfter !== oldAfter) {\r\n        break editBefore;\r\n      }\r\n      var prefixLength = Math.min(oldCursor, newCursor);\r\n      var oldPrefix = oldBefore.slice(0, prefixLength);\r\n      var newPrefix = newBefore.slice(0, prefixLength);\r\n      if (oldPrefix !== newPrefix) {\r\n        break editBefore;\r\n      }\r\n      var oldMiddle = oldBefore.slice(prefixLength);\r\n      var newMiddle = newBefore.slice(prefixLength);\r\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldAfter);\r\n    }\r\n    editAfter: {\r\n      // is this an insert or delete right after oldCursor?\r\n      if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {\r\n        break editAfter;\r\n      }\r\n      var cursor = oldCursor;\r\n      var newBefore = newText.slice(0, cursor);\r\n      var newAfter = newText.slice(cursor);\r\n      if (newBefore !== oldBefore) {\r\n        break editAfter;\r\n      }\r\n      var suffixLength = Math.min(oldLength - cursor, newLength - cursor);\r\n      var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);\r\n      var newSuffix = newAfter.slice(newAfter.length - suffixLength);\r\n      if (oldSuffix !== newSuffix) {\r\n        break editAfter;\r\n      }\r\n      var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);\r\n      var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);\r\n      return make_edit_splice(oldBefore, oldMiddle, newMiddle, oldSuffix);\r\n    }\r\n  }\r\n  if (oldRange.length > 0 && newRange && newRange.length === 0) {\r\n    replaceRange: {\r\n      // see if diff could be a splice of the old selection range\r\n      var oldPrefix = oldText.slice(0, oldRange.index);\r\n      var oldSuffix = oldText.slice(oldRange.index + oldRange.length);\r\n      var prefixLength = oldPrefix.length;\r\n      var suffixLength = oldSuffix.length;\r\n      if (newLength < prefixLength + suffixLength) {\r\n        break replaceRange;\r\n      }\r\n      var newPrefix = newText.slice(0, prefixLength);\r\n      var newSuffix = newText.slice(newLength - suffixLength);\r\n      if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {\r\n        break replaceRange;\r\n      }\r\n      var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);\r\n      var newMiddle = newText.slice(prefixLength, newLength - suffixLength);\r\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldSuffix);\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction diff(text1, text2, cursor_pos, cleanup) {\r\n  // only pass fix_unicode=true at the top level, not when diff_main is\r\n  // recursively invoked\r\n  return diff_main(text1, text2, cursor_pos, cleanup, true);\r\n}\r\n\r\ndiff.INSERT = DIFF_INSERT;\r\ndiff.DELETE = DIFF_DELETE;\r\ndiff.EQUAL = DIFF_EQUAL;\r\n\r\nmodule.exports = diff;\r\n", "import cloneDeep = require('lodash.clonedeep');\r\nimport isEqual = require('lodash.isequal');\r\n\r\ninterface AttributeMap {\r\n  [key: string]: unknown;\r\n}\r\n\r\nnamespace AttributeMap {\r\n  export function compose(\r\n    a: AttributeMap = {},\r\n    b: AttributeMap = {},\r\n    keepNull = false,\r\n  ): AttributeMap | undefined {\r\n    if (typeof a !== 'object') {\r\n      a = {};\r\n    }\r\n    if (typeof b !== 'object') {\r\n      b = {};\r\n    }\r\n    let attributes = cloneDeep(b);\r\n    if (!keepNull) {\r\n      attributes = Object.keys(attributes).reduce<AttributeMap>((copy, key) => {\r\n        if (attributes[key] != null) {\r\n          copy[key] = attributes[key];\r\n        }\r\n        return copy;\r\n      }, {});\r\n    }\r\n    for (const key in a) {\r\n      if (a[key] !== undefined && b[key] === undefined) {\r\n        attributes[key] = a[key];\r\n      }\r\n    }\r\n    return Object.keys(attributes).length > 0 ? attributes : undefined;\r\n  }\r\n\r\n  export function diff(\r\n    a: AttributeMap = {},\r\n    b: AttributeMap = {},\r\n  ): AttributeMap | undefined {\r\n    if (typeof a !== 'object') {\r\n      a = {};\r\n    }\r\n    if (typeof b !== 'object') {\r\n      b = {};\r\n    }\r\n    const attributes = Object.keys(a)\r\n      .concat(Object.keys(b))\r\n      .reduce<AttributeMap>((attrs, key) => {\r\n        if (!isEqual(a[key], b[key])) {\r\n          attrs[key] = b[key] === undefined ? null : b[key];\r\n        }\r\n        return attrs;\r\n      }, {});\r\n    return Object.keys(attributes).length > 0 ? attributes : undefined;\r\n  }\r\n\r\n  export function invert(\r\n    attr: AttributeMap = {},\r\n    base: AttributeMap = {},\r\n  ): AttributeMap {\r\n    attr = attr || {};\r\n    const baseInverted = Object.keys(base).reduce<AttributeMap>((memo, key) => {\r\n      if (base[key] !== attr[key] && attr[key] !== undefined) {\r\n        memo[key] = base[key];\r\n      }\r\n      return memo;\r\n    }, {});\r\n    return Object.keys(attr).reduce<AttributeMap>((memo, key) => {\r\n      if (attr[key] !== base[key] && base[key] === undefined) {\r\n        memo[key] = null;\r\n      }\r\n      return memo;\r\n    }, baseInverted);\r\n  }\r\n\r\n  export function transform(\r\n    a: AttributeMap | undefined,\r\n    b: AttributeMap | undefined,\r\n    priority = false,\r\n  ): AttributeMap | undefined {\r\n    if (typeof a !== 'object') {\r\n      return b;\r\n    }\r\n    if (typeof b !== 'object') {\r\n      return undefined;\r\n    }\r\n    if (!priority) {\r\n      return b; // b simply overwrites us without priority\r\n    }\r\n    const attributes = Object.keys(b).reduce<AttributeMap>((attrs, key) => {\r\n      if (a[key] === undefined) {\r\n        attrs[key] = b[key]; // null is a valid value\r\n      }\r\n      return attrs;\r\n    }, {});\r\n    return Object.keys(attributes).length > 0 ? attributes : undefined;\r\n  }\r\n}\r\n\r\nexport default AttributeMap;\r\n", "import AttributeMap from './AttributeMap';\r\n\r\ninterface Op {\r\n  // only one property out of {insert, delete, retain} will be present\r\n  insert?: string | Record<string, unknown>;\r\n  delete?: number;\r\n  retain?: number | Record<string, unknown>;\r\n\r\n  attributes?: AttributeMap;\r\n}\r\n\r\nnamespace Op {\r\n  export function length(op: Op): number {\r\n    if (typeof op.delete === 'number') {\r\n      return op.delete;\r\n    } else if (typeof op.retain === 'number') {\r\n      return op.retain;\r\n    } else if (typeof op.retain === 'object' && op.retain !== null) {\r\n      return 1;\r\n    } else {\r\n      return typeof op.insert === 'string' ? op.insert.length : 1;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Op;\r\n", "import Op from './Op';\r\n\r\nexport default class Iterator {\r\n  ops: Op[];\r\n  index: number;\r\n  offset: number;\r\n\r\n  constructor(ops: Op[]) {\r\n    this.ops = ops;\r\n    this.index = 0;\r\n    this.offset = 0;\r\n  }\r\n\r\n  hasNext(): boolean {\r\n    return this.peekLength() < Infinity;\r\n  }\r\n\r\n  next(length?: number): Op {\r\n    if (!length) {\r\n      length = Infinity;\r\n    }\r\n    const nextOp = this.ops[this.index];\r\n    if (nextOp) {\r\n      const offset = this.offset;\r\n      const opLength = Op.length(nextOp);\r\n      if (length >= opLength - offset) {\r\n        length = opLength - offset;\r\n        this.index += 1;\r\n        this.offset = 0;\r\n      } else {\r\n        this.offset += length;\r\n      }\r\n      if (typeof nextOp.delete === 'number') {\r\n        return { delete: length };\r\n      } else {\r\n        const retOp: Op = {};\r\n        if (nextOp.attributes) {\r\n          retOp.attributes = nextOp.attributes;\r\n        }\r\n        if (typeof nextOp.retain === 'number') {\r\n          retOp.retain = length;\r\n        } else if (\r\n          typeof nextOp.retain === 'object' &&\r\n          nextOp.retain !== null\r\n        ) {\r\n          // offset should === 0, length should === 1\r\n          retOp.retain = nextOp.retain;\r\n        } else if (typeof nextOp.insert === 'string') {\r\n          retOp.insert = nextOp.insert.substr(offset, length);\r\n        } else {\r\n          // offset should === 0, length should === 1\r\n          retOp.insert = nextOp.insert;\r\n        }\r\n        return retOp;\r\n      }\r\n    } else {\r\n      return { retain: Infinity };\r\n    }\r\n  }\r\n\r\n  peek(): Op {\r\n    return this.ops[this.index];\r\n  }\r\n\r\n  peekLength(): number {\r\n    if (this.ops[this.index]) {\r\n      // Should never return 0 if our index is being managed correctly\r\n      return Op.length(this.ops[this.index]) - this.offset;\r\n    } else {\r\n      return Infinity;\r\n    }\r\n  }\r\n\r\n  peekType(): string {\r\n    const op = this.ops[this.index];\r\n    if (op) {\r\n      if (typeof op.delete === 'number') {\r\n        return 'delete';\r\n      } else if (\r\n        typeof op.retain === 'number' ||\r\n        (typeof op.retain === 'object' && op.retain !== null)\r\n      ) {\r\n        return 'retain';\r\n      } else {\r\n        return 'insert';\r\n      }\r\n    }\r\n    return 'retain';\r\n  }\r\n\r\n  rest(): Op[] {\r\n    if (!this.hasNext()) {\r\n      return [];\r\n    } else if (this.offset === 0) {\r\n      return this.ops.slice(this.index);\r\n    } else {\r\n      const offset = this.offset;\r\n      const index = this.index;\r\n      const next = this.next();\r\n      const rest = this.ops.slice(this.index);\r\n      this.offset = offset;\r\n      this.index = index;\r\n      return [next].concat(rest);\r\n    }\r\n  }\r\n}\r\n", "import * as diff from 'fast-diff';\r\nimport cloneDeep = require('lodash.clonedeep');\r\nimport isEqual = require('lodash.isequal');\r\nimport AttributeMap from './AttributeMap';\r\nimport Op from './Op';\r\nimport OpIterator from './OpIterator';\r\n\r\nconst NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()\r\n\r\ninterface EmbedHandler<T> {\r\n  compose(a: T, b: T, keepNull: boolean): T;\r\n  invert(a: T, b: T): T;\r\n  transform(a: T, b: T, priority: boolean): T;\r\n}\r\n\r\nconst getEmbedTypeAndData = (\r\n  a: Op['insert'] | Op['retain'],\r\n  b: Op['insert'],\r\n): [string, unknown, unknown] => {\r\n  if (typeof a !== 'object' || a === null) {\r\n    throw new Error(`cannot retain a ${typeof a}`);\r\n  }\r\n  if (typeof b !== 'object' || b === null) {\r\n    throw new Error(`cannot retain a ${typeof b}`);\r\n  }\r\n  const embedType = Object.keys(a)[0];\r\n  if (!embedType || embedType !== Object.keys(b)[0]) {\r\n    throw new Error(\r\n      `embed types not matched: ${embedType} != ${Object.keys(b)[0]}`,\r\n    );\r\n  }\r\n  return [embedType, a[embedType], b[embedType]];\r\n};\r\n\r\nclass Delta {\r\n  static Op = Op;\r\n  static OpIterator = OpIterator;\r\n  static AttributeMap = AttributeMap;\r\n  private static handlers: { [embedType: string]: EmbedHandler<unknown> } = {};\r\n\r\n  static registerEmbed<T>(embedType: string, handler: EmbedHandler<T>): void {\r\n    this.handlers[embedType] = handler;\r\n  }\r\n\r\n  static unregisterEmbed(embedType: string): void {\r\n    delete this.handlers[embedType];\r\n  }\r\n\r\n  private static getHandler(embedType: string): EmbedHandler<unknown> {\r\n    const handler = this.handlers[embedType];\r\n    if (!handler) {\r\n      throw new Error(`no handlers for embed type \"${embedType}\"`);\r\n    }\r\n    return handler;\r\n  }\r\n\r\n  ops: Op[];\r\n  constructor(ops?: Op[] | { ops: Op[] }) {\r\n    // Assume we are given a well formed ops\r\n    if (Array.isArray(ops)) {\r\n      this.ops = ops;\r\n    } else if (ops != null && Array.isArray(ops.ops)) {\r\n      this.ops = ops.ops;\r\n    } else {\r\n      this.ops = [];\r\n    }\r\n  }\r\n\r\n  insert(\r\n    arg: string | Record<string, unknown>,\r\n    attributes?: AttributeMap | null,\r\n  ): this {\r\n    const newOp: Op = {};\r\n    if (typeof arg === 'string' && arg.length === 0) {\r\n      return this;\r\n    }\r\n    newOp.insert = arg;\r\n    if (\r\n      attributes != null &&\r\n      typeof attributes === 'object' &&\r\n      Object.keys(attributes).length > 0\r\n    ) {\r\n      newOp.attributes = attributes;\r\n    }\r\n    return this.push(newOp);\r\n  }\r\n\r\n  delete(length: number): this {\r\n    if (length <= 0) {\r\n      return this;\r\n    }\r\n    return this.push({ delete: length });\r\n  }\r\n\r\n  retain(\r\n    length: number | Record<string, unknown>,\r\n    attributes?: AttributeMap | null,\r\n  ): this {\r\n    if (typeof length === 'number' && length <= 0) {\r\n      return this;\r\n    }\r\n    const newOp: Op = { retain: length };\r\n    if (\r\n      attributes != null &&\r\n      typeof attributes === 'object' &&\r\n      Object.keys(attributes).length > 0\r\n    ) {\r\n      newOp.attributes = attributes;\r\n    }\r\n    return this.push(newOp);\r\n  }\r\n\r\n  push(newOp: Op): this {\r\n    let index = this.ops.length;\r\n    let lastOp = this.ops[index - 1];\r\n    newOp = cloneDeep(newOp);\r\n    if (typeof lastOp === 'object') {\r\n      if (\r\n        typeof newOp.delete === 'number' &&\r\n        typeof lastOp.delete === 'number'\r\n      ) {\r\n        this.ops[index - 1] = { delete: lastOp.delete + newOp.delete };\r\n        return this;\r\n      }\r\n      // Since it does not matter if we insert before or after deleting at the same index,\r\n      // always prefer to insert first\r\n      if (typeof lastOp.delete === 'number' && newOp.insert != null) {\r\n        index -= 1;\r\n        lastOp = this.ops[index - 1];\r\n        if (typeof lastOp !== 'object') {\r\n          this.ops.unshift(newOp);\r\n          return this;\r\n        }\r\n      }\r\n      if (isEqual(newOp.attributes, lastOp.attributes)) {\r\n        if (\r\n          typeof newOp.insert === 'string' &&\r\n          typeof lastOp.insert === 'string'\r\n        ) {\r\n          this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };\r\n          if (typeof newOp.attributes === 'object') {\r\n            this.ops[index - 1].attributes = newOp.attributes;\r\n          }\r\n          return this;\r\n        } else if (\r\n          typeof newOp.retain === 'number' &&\r\n          typeof lastOp.retain === 'number'\r\n        ) {\r\n          this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };\r\n          if (typeof newOp.attributes === 'object') {\r\n            this.ops[index - 1].attributes = newOp.attributes;\r\n          }\r\n          return this;\r\n        }\r\n      }\r\n    }\r\n    if (index === this.ops.length) {\r\n      this.ops.push(newOp);\r\n    } else {\r\n      this.ops.splice(index, 0, newOp);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  chop(): this {\r\n    const lastOp = this.ops[this.ops.length - 1];\r\n    if (lastOp && typeof lastOp.retain === 'number' && !lastOp.attributes) {\r\n      this.ops.pop();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  filter(predicate: (op: Op, index: number) => boolean): Op[] {\r\n    return this.ops.filter(predicate);\r\n  }\r\n\r\n  forEach(predicate: (op: Op, index: number) => void): void {\r\n    this.ops.forEach(predicate);\r\n  }\r\n\r\n  map<T>(predicate: (op: Op, index: number) => T): T[] {\r\n    return this.ops.map(predicate);\r\n  }\r\n\r\n  partition(predicate: (op: Op) => boolean): [Op[], Op[]] {\r\n    const passed: Op[] = [];\r\n    const failed: Op[] = [];\r\n    this.forEach((op) => {\r\n      const target = predicate(op) ? passed : failed;\r\n      target.push(op);\r\n    });\r\n    return [passed, failed];\r\n  }\r\n\r\n  reduce<T>(\r\n    predicate: (accum: T, curr: Op, index: number) => T,\r\n    initialValue: T,\r\n  ): T {\r\n    return this.ops.reduce(predicate, initialValue);\r\n  }\r\n\r\n  changeLength(): number {\r\n    return this.reduce((length, elem) => {\r\n      if (elem.insert) {\r\n        return length + Op.length(elem);\r\n      } else if (elem.delete) {\r\n        return length - elem.delete;\r\n      }\r\n      return length;\r\n    }, 0);\r\n  }\r\n\r\n  length(): number {\r\n    return this.reduce((length, elem) => {\r\n      return length + Op.length(elem);\r\n    }, 0);\r\n  }\r\n\r\n  slice(start = 0, end = Infinity): Delta {\r\n    const ops = [];\r\n    const iter = new OpIterator(this.ops);\r\n    let index = 0;\r\n    while (index < end && iter.hasNext()) {\r\n      let nextOp;\r\n      if (index < start) {\r\n        nextOp = iter.next(start - index);\r\n      } else {\r\n        nextOp = iter.next(end - index);\r\n        ops.push(nextOp);\r\n      }\r\n      index += Op.length(nextOp);\r\n    }\r\n    return new Delta(ops);\r\n  }\r\n\r\n  compose(other: Delta): Delta {\r\n    const thisIter = new OpIterator(this.ops);\r\n    const otherIter = new OpIterator(other.ops);\r\n    const ops = [];\r\n    const firstOther = otherIter.peek();\r\n    if (\r\n      firstOther != null &&\r\n      typeof firstOther.retain === 'number' &&\r\n      firstOther.attributes == null\r\n    ) {\r\n      let firstLeft = firstOther.retain;\r\n      while (\r\n        thisIter.peekType() === 'insert' &&\r\n        thisIter.peekLength() <= firstLeft\r\n      ) {\r\n        firstLeft -= thisIter.peekLength();\r\n        ops.push(thisIter.next());\r\n      }\r\n      if (firstOther.retain - firstLeft > 0) {\r\n        otherIter.next(firstOther.retain - firstLeft);\r\n      }\r\n    }\r\n    const delta = new Delta(ops);\r\n    while (thisIter.hasNext() || otherIter.hasNext()) {\r\n      if (otherIter.peekType() === 'insert') {\r\n        delta.push(otherIter.next());\r\n      } else if (thisIter.peekType() === 'delete') {\r\n        delta.push(thisIter.next());\r\n      } else {\r\n        const length = Math.min(thisIter.peekLength(), otherIter.peekLength());\r\n        const thisOp = thisIter.next(length);\r\n        const otherOp = otherIter.next(length);\r\n        if (otherOp.retain) {\r\n          const newOp: Op = {};\r\n          if (typeof thisOp.retain === 'number') {\r\n            newOp.retain =\r\n              typeof otherOp.retain === 'number' ? length : otherOp.retain;\r\n          } else {\r\n            if (typeof otherOp.retain === 'number') {\r\n              if (thisOp.retain == null) {\r\n                newOp.insert = thisOp.insert;\r\n              } else {\r\n                newOp.retain = thisOp.retain;\r\n              }\r\n            } else {\r\n              const action = thisOp.retain == null ? 'insert' : 'retain';\r\n              const [embedType, thisData, otherData] = getEmbedTypeAndData(\r\n                thisOp[action],\r\n                otherOp.retain,\r\n              );\r\n              const handler = Delta.getHandler(embedType);\r\n              newOp[action] = {\r\n                [embedType]: handler.compose(\r\n                  thisData,\r\n                  otherData,\r\n                  action === 'retain',\r\n                ),\r\n              };\r\n            }\r\n          }\r\n          // Preserve null when composing with a retain, otherwise remove it for inserts\r\n          const attributes = AttributeMap.compose(\r\n            thisOp.attributes,\r\n            otherOp.attributes,\r\n            typeof thisOp.retain === 'number',\r\n          );\r\n          if (attributes) {\r\n            newOp.attributes = attributes;\r\n          }\r\n          delta.push(newOp);\r\n\r\n          // Optimization if rest of other is just retain\r\n          if (\r\n            !otherIter.hasNext() &&\r\n            isEqual(delta.ops[delta.ops.length - 1], newOp)\r\n          ) {\r\n            const rest = new Delta(thisIter.rest());\r\n            return delta.concat(rest).chop();\r\n          }\r\n\r\n          // Other op should be delete, we could be an insert or retain\r\n          // Insert + delete cancels out\r\n        } else if (\r\n          typeof otherOp.delete === 'number' &&\r\n          (typeof thisOp.retain === 'number' ||\r\n            (typeof thisOp.retain === 'object' && thisOp.retain !== null))\r\n        ) {\r\n          delta.push(otherOp);\r\n        }\r\n      }\r\n    }\r\n    return delta.chop();\r\n  }\r\n\r\n  concat(other: Delta): Delta {\r\n    const delta = new Delta(this.ops.slice());\r\n    if (other.ops.length > 0) {\r\n      delta.push(other.ops[0]);\r\n      delta.ops = delta.ops.concat(other.ops.slice(1));\r\n    }\r\n    return delta;\r\n  }\r\n\r\n  diff(other: Delta, cursor?: number | diff.CursorInfo): Delta {\r\n    if (this.ops === other.ops) {\r\n      return new Delta();\r\n    }\r\n    const strings = [this, other].map((delta) => {\r\n      return delta\r\n        .map((op) => {\r\n          if (op.insert != null) {\r\n            return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;\r\n          }\r\n          const prep = delta === other ? 'on' : 'with';\r\n          throw new Error('diff() called ' + prep + ' non-document');\r\n        })\r\n        .join('');\r\n    });\r\n    const retDelta = new Delta();\r\n    const diffResult = diff(strings[0], strings[1], cursor, true);\r\n    const thisIter = new OpIterator(this.ops);\r\n    const otherIter = new OpIterator(other.ops);\r\n    diffResult.forEach((component: diff.Diff) => {\r\n      let length = component[1].length;\r\n      while (length > 0) {\r\n        let opLength = 0;\r\n        switch (component[0]) {\r\n          case diff.INSERT:\r\n            opLength = Math.min(otherIter.peekLength(), length);\r\n            retDelta.push(otherIter.next(opLength));\r\n            break;\r\n          case diff.DELETE:\r\n            opLength = Math.min(length, thisIter.peekLength());\r\n            thisIter.next(opLength);\r\n            retDelta.delete(opLength);\r\n            break;\r\n          case diff.EQUAL:\r\n            opLength = Math.min(\r\n              thisIter.peekLength(),\r\n              otherIter.peekLength(),\r\n              length,\r\n            );\r\n            const thisOp = thisIter.next(opLength);\r\n            const otherOp = otherIter.next(opLength);\r\n            if (isEqual(thisOp.insert, otherOp.insert)) {\r\n              retDelta.retain(\r\n                opLength,\r\n                AttributeMap.diff(thisOp.attributes, otherOp.attributes),\r\n              );\r\n            } else {\r\n              retDelta.push(otherOp).delete(opLength);\r\n            }\r\n            break;\r\n        }\r\n        length -= opLength;\r\n      }\r\n    });\r\n    return retDelta.chop();\r\n  }\r\n\r\n  eachLine(\r\n    predicate: (\r\n      line: Delta,\r\n      attributes: AttributeMap,\r\n      index: number,\r\n    ) => boolean | void,\r\n    newline = '\\n',\r\n  ): void {\r\n    const iter = new OpIterator(this.ops);\r\n    let line = new Delta();\r\n    let i = 0;\r\n    while (iter.hasNext()) {\r\n      if (iter.peekType() !== 'insert') {\r\n        return;\r\n      }\r\n      const thisOp = iter.peek();\r\n      const start = Op.length(thisOp) - iter.peekLength();\r\n      const index =\r\n        typeof thisOp.insert === 'string'\r\n          ? thisOp.insert.indexOf(newline, start) - start\r\n          : -1;\r\n      if (index < 0) {\r\n        line.push(iter.next());\r\n      } else if (index > 0) {\r\n        line.push(iter.next(index));\r\n      } else {\r\n        if (predicate(line, iter.next(1).attributes || {}, i) === false) {\r\n          return;\r\n        }\r\n        i += 1;\r\n        line = new Delta();\r\n      }\r\n    }\r\n    if (line.length() > 0) {\r\n      predicate(line, {}, i);\r\n    }\r\n  }\r\n\r\n  invert(base: Delta): Delta {\r\n    const inverted = new Delta();\r\n    this.reduce((baseIndex, op) => {\r\n      if (op.insert) {\r\n        inverted.delete(Op.length(op));\r\n      } else if (typeof op.retain === 'number' && op.attributes == null) {\r\n        inverted.retain(op.retain);\r\n        return baseIndex + op.retain;\r\n      } else if (op.delete || typeof op.retain === 'number') {\r\n        const length = (op.delete || op.retain) as number;\r\n        const slice = base.slice(baseIndex, baseIndex + length);\r\n        slice.forEach((baseOp) => {\r\n          if (op.delete) {\r\n            inverted.push(baseOp);\r\n          } else if (op.retain && op.attributes) {\r\n            inverted.retain(\r\n              Op.length(baseOp),\r\n              AttributeMap.invert(op.attributes, baseOp.attributes),\r\n            );\r\n          }\r\n        });\r\n        return baseIndex + length;\r\n      } else if (typeof op.retain === 'object' && op.retain !== null) {\r\n        const slice = base.slice(baseIndex, baseIndex + 1);\r\n        const baseOp = new OpIterator(slice.ops).next();\r\n        const [embedType, opData, baseOpData] = getEmbedTypeAndData(\r\n          op.retain,\r\n          baseOp.insert,\r\n        );\r\n        const handler = Delta.getHandler(embedType);\r\n        inverted.retain(\r\n          { [embedType]: handler.invert(opData, baseOpData) },\r\n          AttributeMap.invert(op.attributes, baseOp.attributes),\r\n        );\r\n        return baseIndex + 1;\r\n      }\r\n      return baseIndex;\r\n    }, 0);\r\n    return inverted.chop();\r\n  }\r\n\r\n  transform(index: number, priority?: boolean): number;\r\n  transform(other: Delta, priority?: boolean): Delta;\r\n  transform(arg: number | Delta, priority = false): typeof arg {\r\n    priority = !!priority;\r\n    if (typeof arg === 'number') {\r\n      return this.transformPosition(arg, priority);\r\n    }\r\n    const other: Delta = arg;\r\n    const thisIter = new OpIterator(this.ops);\r\n    const otherIter = new OpIterator(other.ops);\r\n    const delta = new Delta();\r\n    while (thisIter.hasNext() || otherIter.hasNext()) {\r\n      if (\r\n        thisIter.peekType() === 'insert' &&\r\n        (priority || otherIter.peekType() !== 'insert')\r\n      ) {\r\n        delta.retain(Op.length(thisIter.next()));\r\n      } else if (otherIter.peekType() === 'insert') {\r\n        delta.push(otherIter.next());\r\n      } else {\r\n        const length = Math.min(thisIter.peekLength(), otherIter.peekLength());\r\n        const thisOp = thisIter.next(length);\r\n        const otherOp = otherIter.next(length);\r\n        if (thisOp.delete) {\r\n          // Our delete either makes their delete redundant or removes their retain\r\n          continue;\r\n        } else if (otherOp.delete) {\r\n          delta.push(otherOp);\r\n        } else {\r\n          const thisData = thisOp.retain;\r\n          const otherData = otherOp.retain;\r\n          let transformedData: Op['retain'] =\r\n            typeof otherData === 'object' && otherData !== null\r\n              ? otherData\r\n              : length;\r\n          if (\r\n            typeof thisData === 'object' &&\r\n            thisData !== null &&\r\n            typeof otherData === 'object' &&\r\n            otherData !== null\r\n          ) {\r\n            const embedType = Object.keys(thisData)[0];\r\n            if (embedType === Object.keys(otherData)[0]) {\r\n              const handler = Delta.getHandler(embedType);\r\n              if (handler) {\r\n                transformedData = {\r\n                  [embedType]: handler.transform(\r\n                    thisData[embedType],\r\n                    otherData[embedType],\r\n                    priority,\r\n                  ),\r\n                };\r\n              }\r\n            }\r\n          }\r\n\r\n          // We retain either their retain or insert\r\n          delta.retain(\r\n            transformedData,\r\n            AttributeMap.transform(\r\n              thisOp.attributes,\r\n              otherOp.attributes,\r\n              priority,\r\n            ),\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return delta.chop();\r\n  }\r\n\r\n  transformPosition(index: number, priority = false): number {\r\n    priority = !!priority;\r\n    const thisIter = new OpIterator(this.ops);\r\n    let offset = 0;\r\n    while (thisIter.hasNext() && offset <= index) {\r\n      const length = thisIter.peekLength();\r\n      const nextType = thisIter.peekType();\r\n      thisIter.next();\r\n      if (nextType === 'delete') {\r\n        index -= Math.min(length, index - offset);\r\n        continue;\r\n      } else if (nextType === 'insert' && (offset < index || !priority)) {\r\n        index += length;\r\n      }\r\n      offset += length;\r\n    }\r\n    return index;\r\n  }\r\n}\r\n\r\nexport default Delta;\r\n\r\nexport { Op, OpIterator, AttributeMap };\r\n\r\nif (typeof module === 'object') {\r\n  module.exports = Delta;\r\n  module.exports.default = Delta;\r\n}\r\n"],
  "mappings": "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",
  "names": ["longtext", "shorttext", "AttributeMap", "Op"]
}
